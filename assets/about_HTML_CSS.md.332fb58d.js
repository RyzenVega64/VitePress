import{_ as a,c as e,o as l,Q as s}from"./chunks/framework.047f4c6e.js";const b=JSON.parse('{"title":"HTML 篇","description":"","frontmatter":{},"headers":[],"relativePath":"about/HTML+CSS.md","lastUpdated":null}'),t={name:"about/HTML+CSS.md"},n=s(`<h1 id="html-篇" tabindex="-1">HTML 篇 <a class="header-anchor" href="#html-篇" aria-label="Permalink to &quot;HTML 篇&quot;">​</a></h1><h2 id="_1-h5新增标签" tabindex="-1">1.H5新增标签 <a class="header-anchor" href="#_1-h5新增标签" aria-label="Permalink to &quot;1.H5新增标签&quot;">​</a></h2><h3 id="语义化标签" tabindex="-1">* 语义化标签： <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;* 语义化标签：&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;header&gt;     头部标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;nav&gt;        导航标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;section&gt;    块级标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;aside&gt;      侧边栏标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;footer&gt;     尾部标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;datalist&gt;   选项列表标签 配合input使用  实现搜索提示功能</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="多媒体标签" tabindex="-1">* 多媒体标签： <a class="header-anchor" href="#多媒体标签" aria-label="Permalink to &quot;* 多媒体标签：&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;video&gt;      视频标签</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;audio&gt;      音频标签</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="图形标签" tabindex="-1">* 图形标签： <a class="header-anchor" href="#图形标签" aria-label="Permalink to &quot;* 图形标签：&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;canvas&gt;     画布标签</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="作用标签" tabindex="-1">* 作用标签 <a class="header-anchor" href="#作用标签" aria-label="Permalink to &quot;* 作用标签&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;mark&gt;       记号标签 用于定义带有记号的文本 在需要突出显示文本时可使用</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;meter&gt;      定义度量衡，仅用于已知最大和最小值的度量</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;marquee&gt;    字体滚动标签</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><hr><h2 id="_2-简述一下你对-html-语义化的理解" tabindex="-1">2.简述一下你对 HTML 语义化的理解？ <a class="header-anchor" href="#_2-简述一下你对-html-语义化的理解" aria-label="Permalink to &quot;2.简述一下你对 HTML 语义化的理解？&quot;">​</a></h2><blockquote><p>用正确的标签做正确的事情。 html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的; 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO; 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p></blockquote><hr><h2 id="_3-标签上-title-与-alt-属性的区别是什么" tabindex="-1">3.标签上 title 与 alt 属性的区别是什么？ <a class="header-anchor" href="#_3-标签上-title-与-alt-属性的区别是什么" aria-label="Permalink to &quot;3.标签上 title 与 alt 属性的区别是什么？&quot;">​</a></h2><blockquote><p>alt 是给搜索引擎识别，在图像无法显示时的替代文本； title 是关于元素的注释信息，主要是给用户解读。 当鼠标放到文字或是图片上时有 title 文字显示。（因为 IE 不标准）在 IE 浏览器中 alt 起到了 title 的作用，变成文字提示。 在定义 img 对象时，将 alt 和 title 属性写全，可以保证在各种浏览器中都能正常使用。</p></blockquote><hr><h2 id="_4-iframe的优缺点" tabindex="-1">4. iframe的优缺点？ <a class="header-anchor" href="#_4-iframe的优缺点" aria-label="Permalink to &quot;4. iframe的优缺点？&quot;">​</a></h2><blockquote><p>优点：</p><ul><li>解决加载缓慢的第三方内容如图标和广告等的加载问题</li><li>并行加载脚本</li><li>Security sandbox</li></ul><p>缺点：</p><ul><li>没有语义</li><li>即时内容为空，加载也需要时间</li><li>iframe会阻塞主页面的Onload事件</li></ul></blockquote><hr><h2 id="_5-href-与-src" tabindex="-1">5. href 与 src？ <a class="header-anchor" href="#_5-href-与-src" aria-label="Permalink to &quot;5. href 与 src？&quot;">​</a></h2><blockquote><p>href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。（目的不是为了引用资源，而是为了建立联系，让当前标签能够链接到目标地址。） src source（缩写），指向外部资源的位置，指向的内容将会应用到文档中当前标签所在位置。 href与src的区别 1、请求资源类型不同：href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系。在请求 src 资源时会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片； 2、作用结果不同：href 用于在当前文档和引用资源之间确立联系；src 用于替换当前内容； 3、浏览器解析方式不同：当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。</p></blockquote><hr><h1 id="css-篇" tabindex="-1">CSS 篇 <a class="header-anchor" href="#css-篇" aria-label="Permalink to &quot;CSS 篇&quot;">​</a></h1><h2 id="_1-介绍一下-css-的盒子模型" tabindex="-1">1.介绍一下 CSS 的盒子模型？ <a class="header-anchor" href="#_1-介绍一下-css-的盒子模型" aria-label="Permalink to &quot;1.介绍一下 CSS 的盒子模型？&quot;">​</a></h2><blockquote><p>标准盒模型（W3C标准）</p><ul><li>在高度和宽度之外绘制元素的内边距和边框 会因为边框和内边距而改变原来设置的宽高</li></ul><p>怪异盒模型（IE标准）</p><ul><li>怪异盒模型把边框和内边距</li></ul></blockquote>`,26),o=[n];function r(i,c,p,h,d,u){return l(),e("div",null,o)}const m=a(t,[["render",r]]);export{b as __pageData,m as default};
